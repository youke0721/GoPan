阶段一:“云存储”系统原型

P2
基于GO原生库实现的 接口逻辑的实现：上传文件，下载文件，查询以及更改文件元信息等功能; 结合Postman进行接口测试
-----------------------------------------------------------------------------
遗留问题：
1.对网盘类服务来说，影响其上传/下载服务并发性能的因素有哪些？如何提高或解决
2.重启系统服务存储在meta里的文件元信息都会消失，如何解决

P3
基于MySQ读写分离的主从原理及实战部署; MySQL表字段设计及基于海量数据的水平分表; Go管理MySQL, 实现文件metaData的持久化。
------------------------------------------------------------------------------
解决问题：
1.解决P3数据持久化的问题
2.主从复制查看错误日志，主从复制的原理，看BUG解决经验的一些好习惯
3.数据库表的设计，`status` int(11) NOT NULL DEFAULT '0' COMMENT '状态(可用/禁用/已删除等状态)',
》》》status 字段的使用可以帮助你更好地管理文件状态，而不需要物理删除文件记录。
查询所有可用文件：SELECT * FROM tbl_file WHERE status = 0;
禁用某个文件：UPDATE tbl_file SET status = 1 WHERE id = 123;
4.海量数据的分库分表的方法：水平，垂直
》》》根据sha1值后两位0-f16*16=256分成256张文件表，用正则匹配的规则到对应表存取，缺点就是拓展需要对哈希的逻辑保证其他文件能够映射


遗留问题：
1.数据库的选择不局限于mysql，主要分为SQL和非SQL数据库，mongodb，redis(云端数据的缓存加速，提高性能)
》》》mysql简单，社区活跃，功能缺乏，读写分离，负载均衡需要配置和部署中间件
2.为什么使用sql而不是用sqlx或者gorm之类更加好的，
3.数据倾斜问题:如果文件的 SHA1 哈希值分布不均匀,可能会导致某些表存储大量数据,而其他表很少数据,造成数据倾斜问题。
》》查询效率问题:需要根据文件名通过正则匹配来确定查询哪个表,在大规模数据下可能会影响查询性能。
中间缓存层  分布式文件系统(如HDFS)存储

p4
基于数据库表设计快速实现用户注册/登录/信息查询功能; 快速实现用户资源隔离存储及安全鉴权功能
解决问题：
1.作为一个后端工程师，如何快速结合代码理解前端
》》》/*
快速浏览整体代码结构:
    首先浏览整个HTML文件,了解整体的页面结构和组成部分。
    关注页面中引入的外部资源,如CSS和JavaScript文件,这些通常是前端开发的重要依赖。
识别关键的HTML元素和属性:
    仔细分析表单结构,识别用户名、密码、确认密码等关键的表单元素。
    查看这些表单元素的ID和类名,这些通常是前端JavaScript代码操作的对象。
分析前端JavaScript代码逻辑:
    虽然这段代码中没有包含JavaScript代码,但通常注册功能会有相应的前端逻辑,如表单验证、提交处理等。
    如果有现成的JavaScript代码,我会仔细阅读理解其实现逻辑,了解前端是如何处理用户的注册请求的。
思考后端处理逻辑:
    作为后端工程师,我会根据前端的表单结构和提交逻辑,思考后端应该如何处理用户的注册请求。
    考虑需要哪些API接口来处理注册流程,如用户名检查、密码验证、账号创建等。
梳理前后端交互过程:
将前端的表单提交逻辑和后端的处理逻辑串联起来,梳理整个注册流程中前后端的交互过程。
    思考前后端应该如何传递数据,如何反馈处理结果,以及异常情况的处理方式。
*/

遗留问题：
1.浏览器校验信息token seesion的一些细节
2.git迭代版本管理和分支的问题
3 关于静态资源访问404的问题 http://localhost:8080/static/view/signin.html 代码重定向的问题
4.这一段因为这几个问题导致commit回调了，所以有些代码注释不见了
5.了解代码的逻辑——token拦截器的发挥作用

