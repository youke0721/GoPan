阶段一:“云存储”系统原型

P2
基于GO原生库实现的 接口逻辑的实现：上传文件，下载文件，查询以及更改文件元信息等功能; 结合Postman进行接口测试
-----------------------------------------------------------------------------
遗留问题：
1.对网盘类服务来说，影响其上传/下载服务并发性能的因素有哪些？如何提高或解决
2.重启系统服务存储在meta里的文件元信息都会消失，如何解决

P3
基于MySQ读写分离的主从原理及实战部署; MySQL表字段设计及基于海量数据的水平分表; Go管理MySQL, 实现文件metaData的持久化。
------------------------------------------------------------------------------
解决问题：
1.解决P3数据持久化的问题
2.主从复制查看错误日志，主从复制的原理，看BUG解决经验的一些好习惯
3.数据库表的设计，`status` int(11) NOT NULL DEFAULT '0' COMMENT '状态(可用/禁用/已删除等状态)',
》》》status 字段的使用可以帮助你更好地管理文件状态，而不需要物理删除文件记录。
查询所有可用文件：SELECT * FROM tbl_file WHERE status = 0;
禁用某个文件：UPDATE tbl_file SET status = 1 WHERE id = 123;
4.海量数据的分库分表的方法：水平，垂直
》》》根据sha1值后两位0-f16*16=256分成256张文件表，用正则匹配的规则到对应表存取，缺点就是拓展需要对哈希的逻辑保证其他文件能够映射



遗留问题：
1.数据库的选择不局限于mysql，主要分为SQL和非SQL数据库，mongodb，redis(云端数据的缓存加速，提高性能)
》》》mysql简单，社区活跃，功能缺乏，读写分离，负载均衡需要配置和部署中间件
2.为什么使用sql而不是用sqlx或者gorm之类更加好的，


